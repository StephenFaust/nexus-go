// Code generated by protoc-gen-nexus.

package message

import (
	"nexus-go/nexus"
	"reflect"
)

// TestCommandService  this is description
type TestCommandService struct{}

// Add  this is method description
func (s *TestCommandService) Add(args *TestRequest, reply *TestResponse) error {
	// define your service ...
	return nil
}

// Sub  this is method description
func (s *TestCommandService) Sub(args *TestRequest, reply *TestResponse) error {
	// define your service ...
	return nil
}

// Mul  this is method description
func (s *TestCommandService) Mul(args *TestRequest, reply *TestResponse) error {
	// define your service ...
	return nil
}

// Div  this is method description
func (s *TestCommandService) Div(args *TestRequest, reply *TestResponse) error {
	// define your service ...
	return nil
}

// GetTestCommandServiceInfo method generated by protoc-gen-nexus.
func GetTestCommandServiceInfo() nexus.ServiceInfo {
	service := &TestCommandService{}
	serviceType := reflect.TypeOf(service)
	methodMap := make(map[string]*nexus.MethodInfo)
	for i := 0; i < serviceType.NumMethod(); i++ {
		method := serviceType.Method(i)
		methodMap[method.Name] = &nexus.MethodInfo{
			Method:   method,
			ParType:  method.Type.In(1),
			RelyType: method.Type.In(2),
		}
	}
	return nexus.ServiceInfo{
		Name:    "TestCommandService",
		Value:   reflect.ValueOf(service),
		Methods: methodMap,
	}
}

type TestQueryService struct{}

func (s *TestQueryService) GetUserById(args *UserReq, reply *User) error {
	// define your service ...
	return nil
}

func (s *TestQueryService) ListUserByIds(args *ListUserReq, reply *UserResp) error {
	// define your service ...
	return nil
}

// GetTestQueryServiceInfo method generated by protoc-gen-nexus.
func GetTestQueryServiceInfo() nexus.ServiceInfo {
	service := &TestQueryService{}
	serviceType := reflect.TypeOf(service)
	methodMap := make(map[string]*nexus.MethodInfo)
	for i := 0; i < serviceType.NumMethod(); i++ {
		method := serviceType.Method(i)
		methodMap[method.Name] = &nexus.MethodInfo{
			Method:   method,
			ParType:  method.Type.In(1),
			RelyType: method.Type.In(2),
		}
	}
	return nexus.ServiceInfo{
		Name:    "TestQueryService",
		Value:   reflect.ValueOf(service),
		Methods: methodMap,
	}
}
